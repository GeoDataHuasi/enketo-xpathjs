XPathJS._parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "AbbreviatedAbsoluteLocationPath": parse_AbbreviatedAbsoluteLocationPath,
        "AbbreviatedAxisSpecifier": parse_AbbreviatedAxisSpecifier,
        "AbbreviatedStep": parse_AbbreviatedStep,
        "AbsoluteLocationPath": parse_AbsoluteLocationPath,
        "AdditiveExpr": parse_AdditiveExpr,
        "AndExpr": parse_AndExpr,
        "AxisName": parse_AxisName,
        "AxisSpecifier": parse_AxisSpecifier,
        "Digits": parse_Digits,
        "EqualityExpr": parse_EqualityExpr,
        "Expr": parse_Expr,
        "FilterExpr": parse_FilterExpr,
        "FunctionCall": parse_FunctionCall,
        "FunctionName": parse_FunctionName,
        "Literal": parse_Literal,
        "LocationPath": parse_LocationPath,
        "MultiplicativeExpr": parse_MultiplicativeExpr,
        "MultiplyOperator": parse_MultiplyOperator,
        "NCName": parse_NCName,
        "Name": parse_Name,
        "NameChar": parse_NameChar,
        "NameStartChar": parse_NameStartChar,
        "NameTest": parse_NameTest,
        "NodeTest": parse_NodeTest,
        "NodeType": parse_NodeType,
        "Number": parse_Number,
        "OrExpr": parse_OrExpr,
        "PathExpr": parse_PathExpr,
        "Predicate": parse_Predicate,
        "PrefixedName": parse_PrefixedName,
        "PrimaryExpr": parse_PrimaryExpr,
        "QName": parse_QName,
        "RelationalExpr": parse_RelationalExpr,
        "RelativeLocationPath": parse_RelativeLocationPath,
        "S": parse_S,
        "Step": parse_Step,
        "UnaryExpr": parse_UnaryExpr,
        "UnionExpr": parse_UnionExpr,
        "UnprefixedName": parse_UnprefixedName,
        "VariableReference": parse_VariableReference,
        "XPath": parse_XPath,
        "_": parse__
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "XPath";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_XPath() {
        var cacheKey = 'XPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_Expr();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr) {
          		return {
          			 tree: expr
          			,nsPrefixes: nsPrefixes
          		}
          	})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LocationPath() {
        var cacheKey = 'LocationPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_RelativeLocationPath();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AbsoluteLocationPath();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbsoluteLocationPath() {
        var cacheKey = 'AbsoluteLocationPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_AbbreviatedAbsoluteLocationPath();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "/") {
            var result4 = "/";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var result7 = parse__();
            if (result7 !== null) {
              var result8 = parse_RelativeLocationPath();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(path) {
            		return {
            			 type: '/'
            			,args: [
            				null,
            				(path) ? path[1] : null
            			]
            		};
            	})(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelativeLocationPath() {
        var cacheKey = 'RelativeLocationPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Step();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "//") {
              var result11 = "//";
              pos += 2;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"//\"");
              }
            }
            if (result11 !== null) {
              var result7 = result11;
            } else {
              if (input.substr(pos, 1) === "/") {
                var result10 = "/";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result10 !== null) {
                var result7 = result10;
              } else {
                var result7 = null;;
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_Step();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "//") {
                var result11 = "//";
                pos += 2;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"//\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                if (input.substr(pos, 1) === "/") {
                  var result10 = "/";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"/\"");
                  }
                }
                if (result10 !== null) {
                  var result7 = result10;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_Step();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		var i;
          		
          		for(i=0; i < repeatedExpr.length; i++)
          		{
          			expr = expandSlashAbbrev(repeatedExpr[i][1], expr, repeatedExpr[i][3]);
          		}
          		
          		return expr;
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Step() {
        var cacheKey = 'Step@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_AxisSpecifier();
        if (result5 !== null) {
          var result6 = parse__();
          if (result6 !== null) {
            var result7 = parse_NodeTest();
            if (result7 !== null) {
              var result8 = [];
              var savedPos2 = pos;
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_Predicate();
                if (result11 !== null) {
                  var result9 = [result10, result11];
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
              } else {
                var result9 = null;
                pos = savedPos2;
              }
              while (result9 !== null) {
                result8.push(result9);
                var savedPos2 = pos;
                var result10 = parse__();
                if (result10 !== null) {
                  var result11 = parse_Predicate();
                  if (result11 !== null) {
                    var result9 = [result10, result11];
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
              }
              if (result8 !== null) {
                var result3 = [result5, result6, result7, result8];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(axis, node, predicate) {
          		return predicateExpression({
          			type: 'step',
          			args: [
          				axis,
          				node
          			]},
          			axis,
          			predicate,
          			1
          		);
          	})(result3[0], result3[2], result3[3])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AbbreviatedStep();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AxisSpecifier() {
        var cacheKey = 'AxisSpecifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_AxisName();
        if (result7 !== null) {
          var result8 = parse__();
          if (result8 !== null) {
            if (input.substr(pos, 2) === "::") {
              var result9 = "::";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"::\"");
              }
            }
            if (result9 !== null) {
              var result5 = [result7, result8, result9];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(axis) {
          		return axis;
          	})(result5[0])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_AbbreviatedAxisSpecifier();
          var result3 = result2 !== null
            ? (function(aas) {
            		return (aas.length) ? aas : 'child';
            	})(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AxisName() {
        var cacheKey = 'AxisName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 16) === "ancestor-or-self") {
          var result13 = "ancestor-or-self";
          pos += 16;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"ancestor-or-self\"");
          }
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          if (input.substr(pos, 8) === "ancestor") {
            var result12 = "ancestor";
            pos += 8;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"ancestor\"");
            }
          }
          if (result12 !== null) {
            var result0 = result12;
          } else {
            if (input.substr(pos, 9) === "attribute") {
              var result11 = "attribute";
              pos += 9;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"attribute\"");
              }
            }
            if (result11 !== null) {
              var result0 = result11;
            } else {
              if (input.substr(pos, 5) === "child") {
                var result10 = "child";
                pos += 5;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"child\"");
                }
              }
              if (result10 !== null) {
                var result0 = result10;
              } else {
                if (input.substr(pos, 18) === "descendant-or-self") {
                  var result9 = "descendant-or-self";
                  pos += 18;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"descendant-or-self\"");
                  }
                }
                if (result9 !== null) {
                  var result0 = result9;
                } else {
                  if (input.substr(pos, 10) === "descendant") {
                    var result8 = "descendant";
                    pos += 10;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"descendant\"");
                    }
                  }
                  if (result8 !== null) {
                    var result0 = result8;
                  } else {
                    if (input.substr(pos, 17) === "following-sibling") {
                      var result7 = "following-sibling";
                      pos += 17;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"following-sibling\"");
                      }
                    }
                    if (result7 !== null) {
                      var result0 = result7;
                    } else {
                      if (input.substr(pos, 9) === "following") {
                        var result6 = "following";
                        pos += 9;
                      } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"following\"");
                        }
                      }
                      if (result6 !== null) {
                        var result0 = result6;
                      } else {
                        if (input.substr(pos, 9) === "namespace") {
                          var result5 = "namespace";
                          pos += 9;
                        } else {
                          var result5 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"namespace\"");
                          }
                        }
                        if (result5 !== null) {
                          var result0 = result5;
                        } else {
                          if (input.substr(pos, 6) === "parent") {
                            var result4 = "parent";
                            pos += 6;
                          } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"parent\"");
                            }
                          }
                          if (result4 !== null) {
                            var result0 = result4;
                          } else {
                            if (input.substr(pos, 17) === "preceding-sibling") {
                              var result3 = "preceding-sibling";
                              pos += 17;
                            } else {
                              var result3 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"preceding-sibling\"");
                              }
                            }
                            if (result3 !== null) {
                              var result0 = result3;
                            } else {
                              if (input.substr(pos, 9) === "preceding") {
                                var result2 = "preceding";
                                pos += 9;
                              } else {
                                var result2 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"preceding\"");
                                }
                              }
                              if (result2 !== null) {
                                var result0 = result2;
                              } else {
                                if (input.substr(pos, 4) === "self") {
                                  var result1 = "self";
                                  pos += 4;
                                } else {
                                  var result1 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"self\"");
                                  }
                                }
                                if (result1 !== null) {
                                  var result0 = result1;
                                } else {
                                  var result0 = null;;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NodeTest() {
        var cacheKey = 'NodeTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var savedPos4 = pos;
        var result17 = parse_NodeType();
        if (result17 !== null) {
          var result18 = parse__();
          if (result18 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result19 = "(";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result19 !== null) {
              var result20 = parse__();
              if (result20 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result21 = ")";
                  pos += 1;
                } else {
                  var result21 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result21 !== null) {
                  var result15 = [result17, result18, result19, result20, result21];
                } else {
                  var result15 = null;
                  pos = savedPos4;
                }
              } else {
                var result15 = null;
                pos = savedPos4;
              }
            } else {
              var result15 = null;
              pos = savedPos4;
            }
          } else {
            var result15 = null;
            pos = savedPos4;
          }
        } else {
          var result15 = null;
          pos = savedPos4;
        }
        var result16 = result15 !== null
          ? (function(nodeType) {
          		return {
          			 type: 'nodeType'
          			,args: [
          				nodeType,
          				[]
          			]
          		};
          	})(result15[0])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos3;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos1 = pos;
          var savedPos2 = pos;
          if (input.substr(pos, 22) === "processing-instruction") {
            var result7 = "processing-instruction";
            pos += 22;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"processing-instruction\"");
            }
          }
          if (result7 !== null) {
            var result8 = parse__();
            if (result8 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result9 = "(";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse__();
                if (result10 !== null) {
                  var result11 = parse_Literal();
                  if (result11 !== null) {
                    var result12 = parse__();
                    if (result12 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result13 = ")";
                        pos += 1;
                      } else {
                        var result13 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result13 !== null) {
                        var result5 = [result7, result8, result9, result10, result11, result12, result13];
                      } else {
                        var result5 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result6 = result5 !== null
            ? (function(pi, arg) {
            		return {
            			 type: 'nodeType'
            			,args: [
            				pi,
            				[arg]
            			]
            		};
            	})(result5[0], result5[4])
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            var result2 = parse_NameTest();
            var result3 = result2 !== null
              ? (function(nt) {
              		return nt;
              	})(result2)
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Predicate() {
        var cacheKey = 'Predicate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "[") {
          var result3 = "[";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_Expr();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result7 = "]";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr) {
          		return expr;
          	})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbbreviatedAbsoluteLocationPath() {
        var cacheKey = 'AbbreviatedAbsoluteLocationPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "//") {
          var result3 = "//";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_RelativeLocationPath();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path) {
          		return expandSlashAbbrev('//', null, path);
          	})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbbreviatedStep() {
        var cacheKey = 'AbbreviatedStep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "..") {
          var result4 = "..";
          pos += 2;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"..\"");
          }
        }
        if (result4 !== null) {
          var result1 = result4;
        } else {
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(abbrev) {
          		/*
          		 * @see http://www.w3.org/TR/xpath/#path-abbrev
          		 */
          		var result = {
          			type: 'step',
          			args: [
          				'self', // assume .
          				{
          					type: 'nodeType',
          					args: [
          						'node',
          						[]
          					]
          				}
          			]
          		}
          		
          		if (abbrev == '..')
          		{
          			result.args[0] = 'parent';
          		}
          		
          		return result;
          	})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbbreviatedAxisSpecifier() {
        var cacheKey = 'AbbreviatedAxisSpecifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result3 = "@";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        var result1 = result3 !== null ? result3 : '';
        var result2 = result1 !== null
          ? (function(attribute) {
          		return (attribute) ? 'attribute' : '';
          	})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Expr() {
        var cacheKey = 'Expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OrExpr();
        var result2 = result1 !== null
          ? (function(expr) {
          		return expr;
          	})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrimaryExpr() {
        var cacheKey = 'PrimaryExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var result17 = parse_VariableReference();
        var result18 = result17 !== null
          ? (function(vr) {
          		return vr;
          	})(result17)
          : null;
        if (result18 !== null) {
          var result16 = result18;
        } else {
          var result16 = null;
          pos = savedPos4;
        }
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 1) === "(") {
            var result11 = "(";
            pos += 1;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result11 !== null) {
            var result12 = parse__();
            if (result12 !== null) {
              var result13 = parse_Expr();
              if (result13 !== null) {
                var result14 = parse__();
                if (result14 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result15 = ")";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result15 !== null) {
                    var result9 = [result11, result12, result13, result14, result15];
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
          var result10 = result9 !== null
            ? (function(expr) {
            		return expr;
            	})(result9[2])
            : null;
          if (result10 !== null) {
            var result8 = result10;
          } else {
            var result8 = null;
            pos = savedPos2;
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            var result6 = parse_Literal();
            var result7 = result6 !== null
              ? (function(l) {
              		return l;
              	})(result6)
              : null;
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var savedPos0 = pos;
              var result3 = parse_Number();
              var result4 = result3 !== null
                ? (function(n) {
                		return n;
                	})(result3)
                : null;
              if (result4 !== null) {
                var result2 = result4;
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_FunctionCall();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionCall() {
        var cacheKey = 'FunctionCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_FunctionName();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_Expr();
                if (result11 !== null) {
                  var result12 = [];
                  var savedPos3 = pos;
                  var result14 = parse__();
                  if (result14 !== null) {
                    if (input.substr(pos, 1) === ",") {
                      var result15 = ",";
                      pos += 1;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result15 !== null) {
                      var result16 = parse__();
                      if (result16 !== null) {
                        var result17 = parse_Expr();
                        if (result17 !== null) {
                          var result13 = [result14, result15, result16, result17];
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                  while (result13 !== null) {
                    result12.push(result13);
                    var savedPos3 = pos;
                    var result14 = parse__();
                    if (result14 !== null) {
                      if (input.substr(pos, 1) === ",") {
                        var result15 = ",";
                        pos += 1;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\",\"");
                        }
                      }
                      if (result15 !== null) {
                        var result16 = parse__();
                        if (result16 !== null) {
                          var result17 = parse_Expr();
                          if (result17 !== null) {
                            var result13 = [result14, result15, result16, result17];
                          } else {
                            var result13 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  }
                  if (result12 !== null) {
                    var result9 = [result10, result11, result12];
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
              } else {
                var result9 = null;
                pos = savedPos2;
              }
              var result6 = result9 !== null ? result9 : '';
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result8 = ")";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, arg) {
          		var i, args = [];
          		if (arg)
          		{
          			args.push(arg[1]);
          			for (i=0; i < arg[2].length; i++)
          			{
          				args.push(arg[2][i][3]);
          			}
          		}
          		return {
          			 type: 'function'
          			,args: [
          				name,
          				args
          			]
          		};
          	})(result1[0], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnionExpr() {
        var cacheKey = 'UnionExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PathExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "|") {
              var result7 = "|";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_PathExpr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "|") {
                var result7 = "|";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_PathExpr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return expressionSimplifier(expr, repeatedExpr, 1, 3);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathExpr() {
        var cacheKey = 'PathExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_FilterExpr();
        if (result7 !== null) {
          var savedPos3 = pos;
          var result10 = parse__();
          if (result10 !== null) {
            if (input.substr(pos, 2) === "//") {
              var result15 = "//";
              pos += 2;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"//\"");
              }
            }
            if (result15 !== null) {
              var result11 = result15;
            } else {
              if (input.substr(pos, 1) === "/") {
                var result14 = "/";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result14 !== null) {
                var result11 = result14;
              } else {
                var result11 = null;;
              };
            }
            if (result11 !== null) {
              var result12 = parse__();
              if (result12 !== null) {
                var result13 = parse_RelativeLocationPath();
                if (result13 !== null) {
                  var result9 = [result10, result11, result12, result13];
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
          var result8 = result9 !== null ? result9 : '';
          if (result8 !== null) {
            var result5 = [result7, result8];
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(expr, path) {
          		if (!path)
          			return expr;
          		
          		return expandSlashAbbrev(path[1], expr, path[3]);
          	})(result5[0], result5[1])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_LocationPath();
          var result3 = result2 !== null
            ? (function(path) {
            		return path;
            	})(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FilterExpr() {
        var cacheKey = 'FilterExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PrimaryExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            var result7 = parse_Predicate();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              var result7 = parse_Predicate();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return predicateExpression(expr, 'child', repeatedExpr, 1);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OrExpr() {
        var cacheKey = 'OrExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AndExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "or") {
              var result7 = "or";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"or\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_AndExpr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "or") {
                var result7 = "or";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"or\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_AndExpr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return expressionSimplifier(expr, repeatedExpr, 1, 3);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AndExpr() {
        var cacheKey = 'AndExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_EqualityExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 3) === "and") {
              var result7 = "and";
              pos += 3;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"and\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_EqualityExpr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 3) === "and") {
                var result7 = "and";
                pos += 3;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"and\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_EqualityExpr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return expressionSimplifier(expr, repeatedExpr, 1, 3);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EqualityExpr() {
        var cacheKey = 'EqualityExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_RelationalExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result11 = "=";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result11 !== null) {
              var result7 = result11;
            } else {
              if (input.substr(pos, 2) === "!=") {
                var result10 = "!=";
                pos += 2;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result10 !== null) {
                var result7 = result10;
              } else {
                var result7 = null;;
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_RelationalExpr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result11 = "=";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                if (input.substr(pos, 2) === "!=") {
                  var result10 = "!=";
                  pos += 2;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result10 !== null) {
                  var result7 = result10;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_RelationalExpr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return expressionSimplifier(expr, repeatedExpr, 1, 3);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalExpr() {
        var cacheKey = 'RelationalExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AdditiveExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "<=") {
              var result13 = "<=";
              pos += 2;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"<=\"");
              }
            }
            if (result13 !== null) {
              var result7 = result13;
            } else {
              if (input.substr(pos, 1) === "<") {
                var result12 = "<";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<\"");
                }
              }
              if (result12 !== null) {
                var result7 = result12;
              } else {
                if (input.substr(pos, 2) === ">=") {
                  var result11 = ">=";
                  pos += 2;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">=\"");
                  }
                }
                if (result11 !== null) {
                  var result7 = result11;
                } else {
                  if (input.substr(pos, 1) === ">") {
                    var result10 = ">";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    var result7 = null;;
                  };
                };
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_AdditiveExpr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "<=") {
                var result13 = "<=";
                pos += 2;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<=\"");
                }
              }
              if (result13 !== null) {
                var result7 = result13;
              } else {
                if (input.substr(pos, 1) === "<") {
                  var result12 = "<";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result12 !== null) {
                  var result7 = result12;
                } else {
                  if (input.substr(pos, 2) === ">=") {
                    var result11 = ">=";
                    pos += 2;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">=\"");
                    }
                  }
                  if (result11 !== null) {
                    var result7 = result11;
                  } else {
                    if (input.substr(pos, 1) === ">") {
                      var result10 = ">";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result10 !== null) {
                      var result7 = result10;
                    } else {
                      var result7 = null;;
                    };
                  };
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_AdditiveExpr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return expressionSimplifier(expr, repeatedExpr, 1, 3);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AdditiveExpr() {
        var cacheKey = 'AdditiveExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_MultiplicativeExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result11 = "+";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result11 !== null) {
              var result7 = result11;
            } else {
              if (input.substr(pos, 1) === "-") {
                var result10 = "-";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result10 !== null) {
                var result7 = result10;
              } else {
                var result7 = null;;
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_MultiplicativeExpr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "+") {
                var result11 = "+";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"+\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                if (input.substr(pos, 1) === "-") {
                  var result10 = "-";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"-\"");
                  }
                }
                if (result10 !== null) {
                  var result7 = result10;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_MultiplicativeExpr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return expressionSimplifier(expr, repeatedExpr, 1, 3);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplicativeExpr() {
        var cacheKey = 'MultiplicativeExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_UnaryExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            var result12 = parse_MultiplyOperator();
            if (result12 !== null) {
              var result7 = result12;
            } else {
              if (input.substr(pos, 3) === "div") {
                var result11 = "div";
                pos += 3;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"div\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                if (input.substr(pos, 3) === "mod") {
                  var result10 = "mod";
                  pos += 3;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"mod\"");
                  }
                }
                if (result10 !== null) {
                  var result7 = result10;
                } else {
                  var result7 = null;;
                };
              };
            }
            if (result7 !== null) {
              var result8 = parse__();
              if (result8 !== null) {
                var result9 = parse_UnaryExpr();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse__();
            if (result6 !== null) {
              var result12 = parse_MultiplyOperator();
              if (result12 !== null) {
                var result7 = result12;
              } else {
                if (input.substr(pos, 3) === "div") {
                  var result11 = "div";
                  pos += 3;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"div\"");
                  }
                }
                if (result11 !== null) {
                  var result7 = result11;
                } else {
                  if (input.substr(pos, 3) === "mod") {
                    var result10 = "mod";
                    pos += 3;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"mod\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    var result7 = null;;
                  };
                };
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_UnaryExpr();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr, repeatedExpr) {
          		return expressionSimplifier(expr, repeatedExpr, 1, 3);
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnaryExpr() {
        var cacheKey = 'UnaryExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result8 = parse_UnionExpr();
        var result9 = result8 !== null
          ? (function(expr) {
          		return expr;
          	})(result8)
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "-") {
            var result4 = "-";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_UnaryExpr();
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(expr) {
            		return {
            			 type: '*' // multiply
            			,args: [
            				{
            					type: 'number',
            					args: [
            						-1
            					]
            				},
            				expr
            			]
            		}
            	})(result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Literal() {
        var cacheKey = 'Literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result11 = "\"";
          pos += 1;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result11 !== null) {
          var result12 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result14 = input.charAt(pos);
            pos++;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result14 !== null) {
            result12.push(result14);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result14 = input.charAt(pos);
              pos++;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result12 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result13 = "\"";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result13 !== null) {
              var result9 = [result11, result12, result13];
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(literals) {
          		return {
          			type: 'string',
          			args: [
          				literals.join('')
          			]
          		};
          	})(result9[1])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "'") {
            var result4 = "'";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos).match(/^[^']/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^']");
              }
            }
            while (result7 !== null) {
              result5.push(result7);
              if (input.substr(pos).match(/^[^']/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[^']");
                }
              }
            }
            if (result5 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result6 = "'";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(literals) {
            		return {
            			type: 'string',
            			args: [
            				literals.join('')
            			]
            		};
            	})(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Number() {
        var cacheKey = 'Number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse_Digits();
        if (result9 !== null) {
          var savedPos4 = pos;
          if (input.substr(pos, 1) === ".") {
            var result12 = ".";
            pos += 1;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result12 !== null) {
            var result14 = parse_Digits();
            var result13 = result14 !== null ? result14 : '';
            if (result13 !== null) {
              var result11 = [result12, result13];
            } else {
              var result11 = null;
              pos = savedPos4;
            }
          } else {
            var result11 = null;
            pos = savedPos4;
          }
          var result10 = result11 !== null ? result11 : '';
          if (result10 !== null) {
            var result7 = [result9, result10];
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(digits, decimals) {
          		return {
          			 type: 'number'
          			,args: [
          				(decimals) ? parseFloat(digits + '.' + decimals[1]) : parseInt(digits)
          			]
          		};
          	})(result7[0], result7[1])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_Digits();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(digits) {
            		return {
            			type: 'number',
            			args: [
            				parseFloat('.' + digits)
            			]
            		};
            	})(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Digits() {
        var cacheKey = 'Digits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) {
          		return digits.join('');
          	})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplyOperator() {
        var cacheKey = 'MultiplyOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "*") {
          var result0 = "*";
          pos += 1;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionName() {
        var cacheKey = 'FunctionName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_QName();
        if (result3 !== null) {
          var result4 = (function() { // - NodeType
          		var i;
          		
          		// exclude NodeType names
          		if (lastQNameParsed.args[0] === null) // no namespace
          		{
          			for(i=0; i<nodeTypeNames.length; i++)
          			{
          				if (lastQNameParsed.args[1] == nodeTypeNames[i]) // name
          				{
          					// Reserved NodeType name used, so don't allow this function name
          					return false;
          				}
          			}
          		}
          		
          		// function name ok
          		return true;
          	})() ? '' : null;
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name) {
          		(name.args[0] === '')
          			? name = {  // NOTE: apparently "name.args[0] = null" doesn't work well because NameTest get's screwed up...
          				 type: name.type
          				,args: [
          					null,
          					name.args[1]
          				]
          			}
          			: trackNsPrefix(name.args[0])
          		;
          		return name;
          	})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VariableReference() {
        var cacheKey = 'VariableReference@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "$") {
          var result3 = "$";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_QName();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name) {
          		trackNsPrefix(name.args[0]);
          		
          		return {
          			 type: '$'
          			,args: [
          				name
          			]
          		};
          	})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameTest() {
        var cacheKey = 'NameTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "*") {
          var result11 = "*";
          pos += 1;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        var result12 = result11 !== null
          ? (function() {
          		return {
          			 type: 'name'
          			,args: [
          				null,
          				null
          			]
          		};
          	})()
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          var savedPos2 = pos;
          var result7 = parse_NCName();
          if (result7 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result8 = ":";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\":\"");
              }
            }
            if (result8 !== null) {
              if (input.substr(pos, 1) === "*") {
                var result9 = "*";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result9 !== null) {
                var result5 = [result7, result8, result9];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result6 = result5 !== null
            ? (function(ns) {
            		trackNsPrefix(ns);
            		return {
            			 type: 'name'
            			,args: [
            				ns,
            				null
            			]
            		};
            	})(result5[0])
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            var result2 = parse_QName();
            var result3 = result2 !== null
              ? (function(name) {
              		trackNsPrefix(name.args[0]);
              		return name;
              	})(result2)
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NodeType() {
        var cacheKey = 'NodeType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 7) === "comment") {
          var result4 = "comment";
          pos += 7;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"comment\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 4) === "text") {
            var result3 = "text";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"text\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 22) === "processing-instruction") {
              var result2 = "processing-instruction";
              pos += 22;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"processing-instruction\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 4) === "node") {
                var result1 = "node";
                pos += 4;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"node\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_S() {
        var cacheKey = 'S@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\r\\n]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	\\r\\n]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_S();
        var result0 = result1 !== null ? result1 : '';
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QName() {
        var cacheKey = 'QName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_PrefixedName();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_UnprefixedName();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(name) {
          		lastQNameParsed = name;
          		return name;
          	})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixedName() {
        var cacheKey = 'PrefixedName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NCName();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_NCName();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ns, name) {
          		return {
          			 type: 'name'
          			,args: [
          				ns,
          				name
          			]
          		};
          	})(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnprefixedName() {
        var cacheKey = 'UnprefixedName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_NCName();
        var result2 = result1 !== null
          ? (function(name) {
          		return {
          			 type: 'name'
          			,args: [
          				null,
          				name
          			]
          		};
          	})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NCName() {
        var cacheKey = 'NCName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = parse_Name();
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameStartChar() {
        var cacheKey = 'NameStartChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Z]");
          }
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result13 = "_";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"_\"");
            }
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            if (input.substr(pos).match(/^[a-z]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("[a-z]");
              }
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              if (input.substr(pos).match(/^[\xC0-\xD6]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xC0-\\xD6]");
                }
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                if (input.substr(pos).match(/^[\xD8-\xF6]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xD8-\\xF6]");
                  }
                }
                if (result10 !== null) {
                  var result0 = result10;
                } else {
                  if (input.substr(pos).match(/^[\xF8-\u02FF]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\xF8-\\u02FF]");
                    }
                  }
                  if (result9 !== null) {
                    var result0 = result9;
                  } else {
                    if (input.substr(pos).match(/^[\u0370-\u037D]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u0370-\\u037D]");
                      }
                    }
                    if (result8 !== null) {
                      var result0 = result8;
                    } else {
                      if (input.substr(pos).match(/^[\u037F-\u1FFF]/) !== null) {
                        var result7 = input.charAt(pos);
                        pos++;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\u037F-\\u1FFF]");
                        }
                      }
                      if (result7 !== null) {
                        var result0 = result7;
                      } else {
                        if (input.substr(pos).match(/^[\u200C-\u200D]/) !== null) {
                          var result6 = input.charAt(pos);
                          pos++;
                        } else {
                          var result6 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\u200C-\\u200D]");
                          }
                        }
                        if (result6 !== null) {
                          var result0 = result6;
                        } else {
                          if (input.substr(pos).match(/^[\u2070-\u218F]/) !== null) {
                            var result5 = input.charAt(pos);
                            pos++;
                          } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                              matchFailed("[\\u2070-\\u218F]");
                            }
                          }
                          if (result5 !== null) {
                            var result0 = result5;
                          } else {
                            if (input.substr(pos).match(/^[\u2C00-\u2FEF]/) !== null) {
                              var result4 = input.charAt(pos);
                              pos++;
                            } else {
                              var result4 = null;
                              if (reportMatchFailures) {
                                matchFailed("[\\u2C00-\\u2FEF]");
                              }
                            }
                            if (result4 !== null) {
                              var result0 = result4;
                            } else {
                              if (input.substr(pos).match(/^[\u3001-\uD7FF]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                              } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                  matchFailed("[\\u3001-\\uD7FF]");
                                }
                              }
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos).match(/^[\uF900-\uFDCF]/) !== null) {
                                  var result2 = input.charAt(pos);
                                  pos++;
                                } else {
                                  var result2 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("[\\uF900-\\uFDCF]");
                                  }
                                }
                                if (result2 !== null) {
                                  var result0 = result2;
                                } else {
                                  if (input.substr(pos).match(/^[\uFDF0-\uFFFD]/) !== null) {
                                    var result1 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result1 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("[\\uFDF0-\\uFFFD]");
                                    }
                                  }
                                  if (result1 !== null) {
                                    var result0 = result1;
                                  } else {
                                    var result0 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameChar() {
        var cacheKey = 'NameChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_NameStartChar();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result6 = "-";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                if (input.substr(pos).match(/^[\xB7]/) !== null) {
                  var result3 = input.charAt(pos);
                  pos++;
                } else {
                  var result3 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xB7]");
                  }
                }
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                    var result2 = input.charAt(pos);
                    pos++;
                  } else {
                    var result2 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u0300-\\u036F]");
                    }
                  }
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                      var result1 = input.charAt(pos);
                      pos++;
                    } else {
                      var result1 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u203F-\\u2040]");
                      }
                    }
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Name() {
        var cacheKey = 'Name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NameStartChar();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_NameChar();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_NameChar();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(startchar, chars) {
          		return startchar + chars.join('');
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
		var expressionSimplifier = function(left, right, rightTypeIndex, rightPartIndex)
      
		{
      
			var  i, j
      
				,result = {
      
					type: '',
      
					args: []
      
				}
      
			;
      
	
      
			result.args.push(left);
      
			for(i = 0; i < right.length; i++)
      
			{
      
				switch(typeof rightTypeIndex)
      
				{
      
					case 'string':
      
						result.type = rightTypeIndex;
      
						break;
      
	
      
					case 'object':
      
						result.type = right[i][rightTypeIndex[0]];
      
						for(j=1; j < rightTypeIndex.length; j++)
      
						{
      
							result.type = result.type[rightTypeIndex[j]];
      
						}
      
						break;
      
	
      
					default:
      
						result.type = right[i][rightTypeIndex];
      
						break;
      
				}
      
				result.args.push(
      
					(typeof rightPartIndex == 'undefined') ? right[i] : right[i][rightPartIndex]
      
				);
      
				
      
				result = {
      
					type: '',
      
					args:[
      
						result
      
					]
      
				};
      
			}
      
			
      
			return result.args[0];
      
		}
      
		
      
		,predicateExpression = function(expr, axis, predicate, predicateIndex)
      
		{
      
			var predicates = [];
      
			
      
			if (predicate.length < 1)
      
			{
      
				return expr;
      
			}
      
			
      
			for (i=0; i < predicate.length; i++)
      
			{
      
				predicates.push(predicate[i][predicateIndex]);
      
			}
      
			
      
			return {
      
				type: 'predicate',
      
				args: [
      
					axis,
      
					expr,
      
					predicates
      
				]
      
			}
      
		}
      
	
      
		// Track all namespace prefixes used in the expression
      
		,nsPrefixes = []
      
		
      
		,trackNsPrefix = function(ns)
      
		{
      
			var  i
      
				,nsPrefixExists = false
      
			;
      
			
      
			if (ns === null) return;
      
	
      
			// add namespace to the list of namespaces
      
			for (i = 0; i < nsPrefixes.length; i++) {
      
				if (nsPrefixes[i] === ns) {
      
					nsPrefixExists = true;
      
					break;
      
				}
      
			}
      
	
      
			if (!nsPrefixExists)
      
			{
      
				nsPrefixes.push(ns);
      
			}
      
		}
      
		
      
		,lastQNameParsed
      
		,nodeTypeNames = [
      
			'comment',
      
			'text',
      
			'processing-instruction',
      
			'node'
      
		]
      
		,expandSlashAbbrev = function(slash, left, right)
      
		{
      
			if (slash == '/')
      
			{
      
				return {
      
					type: '/',
      
					args: [
      
						left,
      
						right
      
					]
      
				};
      
			}
      
			
      
			// slash == '//'
      
			return {
      
				type: '/',
      
				args: [
      
					{
      
						type: '/',
      
						args: [
      
							left,
      
							{
      
								type: 'step',
      
								args: [
      
									'descendant-or-self',
      
									{
      
										type: 'nodeType',
      
										args: [
      
											'node',
      
											[]
      
										]
      
									}
      
								]
      
							}
      
						]
      
					},
      
					right
      
				]
      
			};
      
		}
      
		;
      
	
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
